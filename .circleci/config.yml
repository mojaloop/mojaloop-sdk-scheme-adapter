# CircleCI v2.1 Config
version: 2.1

##
# orbs
#
# Orbs used in this pipeline
###
orbs:
  slack: circleci/slack@3.4.2
  anchore: anchore/anchore-engine@1.9.0
  # slack: circleci/slack@4.9.3 # Ref: https://github.com/mojaloop/ci-config/tree/master/slack-templates
  pr-tools: mojaloop/pr-tools@0.1.10 # Ref: https://github.com/mojaloop/ci-config/
  gh: circleci/github-cli@2.1.0
  nx: nrwl/nx@1.6.0

##
# defaults
#
# YAML defaults templates, in alphabetical order
##
defaults_Dependencies: &defaults_Dependencies |
  apk --no-cache add git
  apk --no-cache add ca-certificates
  apk --no-cache add curl
  apk --no-cache add openssh-client
  apk --no-cache add bash
  apk add --no-cache -t build-dependencies make gcc g++ python3 libtool autoconf automake
  yarn config set unsafe-perm true
  yarn global add node-gyp

defaults_awsCliDependencies: &defaults_awsCliDependencies |
    apk --no-cache add aws-cli

defaults_license_scanner: &defaults_license_scanner
  name: Install and set up license-scanner
  command: |
    git clone https://github.com/mojaloop/license-scanner /tmp/license-scanner
    cd /tmp/license-scanner && make build default-files set-up

defaults_npm_auth: &defaults_npm_auth
  name: Update NPM registry auth token
  command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc

# defaults_npm_publish_release: &defaults_npm_publish_release
#   name: Publish NPM $RELEASE_TAG artifact
#   command: |
#     source $BASH_ENV
#     echo "Publishing tag $RELEASE_TAG"
#     npm publish --tag $RELEASE_TAG --access public
defaults_npm_publish_release: &defaults_npm_publish_release
  name: Publish NPM $RELEASE_TAG artifact
  command: |
    source $BASH_ENV
    echo "Publishing tag $RELEASE_TAG"
    yarn publish

defaults_export_version_from_package: &defaults_export_version_from_package
  name: Format the changelog into the github release body and get release tag
  command: |
    git diff --no-indent-heuristic master~1 HEAD CHANGELOG.md | sed -n '/^+[^+]/ s/^+//p' > /tmp/changes
    echo 'export RELEASE_CHANGES=`cat /tmp/changes`' >> $BASH_ENV
    echo 'export RELEASE_TAG=`cat package-lock.json | jq -r .version`' >> $BASH_ENV

defaults_configure_git: &defaults_configure_git
  name: Configure git
  command: |
    git config user.email ${GIT_CI_EMAIL}
    git config user.name ${GIT_CI_USER}

defaults_configure_nvm: &defaults_configure_nvm
  name: Configure NVM
  command: |
    touch $HOME/.profile
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    echo "Installing Node version: $(cat .nvmrc)"
    nvm install $(cat .nvmrc)
    nvm alias default $(cat .nvmrc)
    nvm use $(cat .nvmrc)

defaults_environment: &defaults_environment
  ## TODO: Update this to master/main once its merged into working branch
  # env var for nx to set main branch
  MAIN_BRANCH_NAME: mvp/bulk-sdk

##
# Executors
#
# CircleCI Executors
##
executors:
  default-docker:
    working_directory: &WORKING_DIR /home/circleci/project
    docker:
      - image: node:16.15.0-alpine # Ref: https://hub.docker.com/_/node?tab=tags&page=1&name=alpine

  default-machine:
    working_directory: *WORKING_DIR
    machine:
      image: ubuntu-2004:current # Ref: https://circleci.com/developer/machine/image/ubuntu-2004

##
# Jobs
#
# A map of CircleCI jobs
##
jobs:
  setup:
    executor: default-docker
    environment: *defaults_environment
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run:
          <<: *defaults_configure_nvm
      - run:
          name: Install Dependencies
          command: yarn install --immutable
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - .yarn/cache
            - .yarn/unplugged
            - node_modules
      - run:
          name: Delete build dependencies
          command: apk del build-dependencies

  test-unit:
    executor: default-docker
    environment: *defaults_environment
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run:
          <<: *defaults_configure_nvm
      ## TODO: figure out why jest is not installed
      # - restore_cache:
      #     name: Restore Yarn Package Cache
      #     keys:
      #       - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install Yarn dependencies
          command: yarn install --immutable
      - run:
          name: Execute unit tests
          command: yarn run build
      - run:
          name: Execute unit tests
          command: yarn run test:unit
      - store_test_results:
          path: /home/circleci/project/
      - store_artifacts:
          path: /home/circleci/project/junit.xml

  ## TODO: Fix Integration tests
  test-integration:
    executor: default-machine
    environment: *defaults_environment
    steps:
      - checkout
      - run:
          <<: *defaults_configure_nvm
      # - run:
      #     name: Install Docker Compose
      #     command: |
      #       curl -L https://github.com/docker/compose/releases/download/1.28.2/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
      #       chmod +x ~/docker-compose
      #       sudo mv ~/docker-compose /usr/local/bin/docker-compose
      # - restore_cache:
      #     name: Restore Yarn Package Cache
      #     keys:
      #       - yarn-packages-{{ checksum "yarn.lock" }}
      # - run:
      #     name: Start docker-compose
      #     command: |
      #       docker-compose pull
      #       docker-compose build
      #       docker-compose up -d
      # - run:
      #     name: Execute Wait4 script
      #     command: |
      #       [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
      #       chmod +x ./docker/wait4/wait4.js
      #       # chmod +x ./docker/wait4/setup_hosts_file.sh
      #       # sh -c "./docker/wait4/setup_hosts_file.sh"
      #       sh -c "./docker/wait4/wait4.js cicd-integration-tests"
      # - run:
      #     name: Execute integration tests
      #     command: |
      #       [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
      #       yarn install --immutable
      #       yarn run test:int
      - run:
          name: Install Yarn dependencies
          command: yarn install --immutable
      - run:
          name: Execute unit tests
          command: yarn run build
      - run:
          name: Execute integration tests
          command: |
            yarn run test:integration
      # - run:
      #     name: prepare test/results
      #     command: |
      #       mkdir -p test/results
      #       mv junit.xml test/results
      # - store_artifacts:
      #     path: ./test/results
      # - store_test_results:
      #     path: ./test/results

  validate-openapi:
    executor: default-docker
    environment: *defaults_environment
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run:
          <<: *defaults_configure_nvm
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Validate openapi
          command: yarn run build:openapi && yarn run validate:api

  lint:
    executor: default-docker
    environment: *defaults_environment
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run:
          <<: *defaults_configure_nvm
      - run:
          name: Install Dependencies
          command: yarn install --immutable
      - run:
          name: Execute linting
          command: yarn run lint
      # - run:
      #     name: Create dir for lint results
      #     command: mkdir -p /lintresults
      # - run:
      #     name: Execute linting
      #     command: (yarn run lint > /lintresults/results.txt)
      # - store_artifacts:
      #     path: /lintresults

  vulnerability-check:
    executor: default-docker
    environment: *defaults_environment
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run:
          <<: *defaults_configure_nvm
      - restore_cache:
          key: dependency-cache-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Create dir for test results
          command: mkdir -p ./audit/results
      - run:
          name: Check for new npm vulnerabilities
          command: npm run audit:check -- -o json > ./audit/results/auditResults.json
      - store_artifacts:
          path: ./audit/results
          prefix: audit

  audit-licenses:
    executor: default-docker
    environment: *defaults_environment
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run:
          <<: *defaults_license_scanner
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Run the license-scanner
          command: cd /tmp/license-scanner && pathToRepo=$CIRCLE_WORKING_DIRECTORY make run
      - store_artifacts:
          path: /tmp/license-scanner/results

  # build-local:
  #   executor: default-machine
  #   environment: *defaults_environment
  #   steps:
  #     - checkout
  #     - run:
  #         name: Build Docker local image for testing
  #         command: |
  #           echo "Building Docker image: local"
  #           # docker build -t $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:local .
  #           export IMAGE_NAME=$DOCKER_ORG/$CIRCLE_PROJECT_REPONAME
  #           echo 'export IMAGE_NAME=`$IMAGE_NAME`' >> $BASH_ENV
  #           export IMAGE_TAG=local

  #           yarn docker:build
  #     - run:
  #         name: Save docker image to workspace
  #         command: docker save -o /tmp/docker-image.tar $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:local
  #     - persist_to_workspace:
  #         root: /tmp
  #         paths:
  #           - ./docker-image.tar

  license-scan:
    executor: default-machine
    environment: *defaults_environment
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker image from workspace
          command: docker load -i /tmp/docker-image.tar
      - run:
          <<: *defaults_license_scanner
      - run:
          name: Run the license-scanner
          command: cd /tmp/license-scanner && mode=docker dockerImages=mojaloop/$CIRCLE_PROJECT_REPONAME:local make run
      - store_artifacts:
          path: /tmp/license-scanner/results

  image-scan:
    executor: anchore/anchore_engine
    environment: *defaults_environment
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Install AWS CLI dependencies
          command: *defaults_awsCliDependencies
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker image from workspace
          command: docker load -i /tmp/docker-image.tar
      - anchore/analyze_local_image:
          dockerfile_path: ./Dockerfile
          image_name: mojaloop/${CIRCLE_PROJECT_REPONAME}:local
          # Anchore bug: if policy_failure is `true`, reports don't get written - we manually check for failures below
          policy_failure: false
          timeout: '500'
      - run:
          name: Evaluate Failures.
          command: |
            if [[ ! $(which jq) ]]; then
              (set +o pipefail; apk add jq || apt-get install -y jq || yum install -y jq)
            fi
            if [[ $(ls anchore-reports/*content-os*.json 2> /dev/null) ]]; then
              printf "\n%s\n" "The following OS packages are installed:"
              jq '[.content | sort_by(.package) | .[] | {package: .package, version: .version}]' anchore-reports/*content-os*.json
            fi
            if [[ $(ls anchore-reports/*vuln*.json 2> /dev/null) ]]; then
              printf "\n%s\n" "The following vulnerabilities were found:"
              jq '[.vulnerabilities | group_by(.package) | .[] | {package: .[0].package, vuln: [.[].vuln]}]' anchore-reports/*vuln*.json
            fi
            #       - run:
            #           name: Upload Anchore reports to s3
            #           command: |
            #             aws s3 cp anchore-reports ${AWS_S3_DIR_ANCHORE_REPORTS}/${CIRCLE_PROJECT_REPONAME}/ --recursive
            #             aws s3 rm ${AWS_S3_DIR_ANCHORE_REPORTS}/latest/ --recursive --exclude "*" --include "${CIRCLE_PROJECT_REPONAME}*"
            #             aws s3 cp anchore-reports ${AWS_S3_DIR_ANCHORE_REPORTS}/latest/ --recursive

            # TODO: Enable this when we want to increase the strictness of our security policies
            # failCount=$(cat anchore-reports/*policy*.json | grep 'fail' | wc -l)
            # echo "FailCount is: ${failCount}"
            # if [ $failCount -gt 0 ]; then
            #   printf "Failed with a policy failure count of: ${failCount}"
            #   exit 1
          # fi
      - store_artifacts:
          path: anchore-reports

  release:
    executor: default-docker
    environment: *defaults_environment
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Configure git
          command: |
            git config user.email ${GIT_CI_EMAIL}
            git config user.name ${GIT_CI_USER}
            git checkout ${CIRCLE_BRANCH}
      - run:
          name: Configure ssh
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan -p 443 ssh.github.com >> ~/.ssh/known_hosts
            ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Generate changelog and bump package version
          command: yarn run release
      - run:
          name: Push the release
          command: git push --follow-tags origin ${CIRCLE_BRANCH}

  github-release:
    executor: default-machine
    environment: *defaults_environment
    steps:
      - run:
          name: Install git
          command: |
            sudo apt-get update && sudo apt-get install -y git
      - checkout
      - run:
          name: Fetch updated release branch
          command: |
            git config user.email ${GIT_CI_EMAIL}
            git config user.name ${GIT_CI_USER}
            git fetch origin
            git checkout origin/${CIRCLE_BRANCH}
      - run:
          # Note: this is rather imperfect, but will do for now
          name: Format the changelog into the github release body and get release tag
          command: |
            git diff --no-indent-heuristic master~1 HEAD CHANGELOG.md | sed -n '/^+[^+]/ s/^+//p' > /tmp/changes
            echo 'export RELEASE_CHANGES=`cat /tmp/changes`' >> $BASH_ENV
            echo 'export RELEASE_TAG=`cat package-lock.json | jq -r .version`' >> $BASH_ENV
      - run:
          name: check the release changes
          command: |
            echo "Changes are: ${RELEASE_CHANGES}"
      - run:
          name: Create Release
          command: |
            gh release create "v${RELEASE_TAG}" --title "v${RELEASE_TAG} Release" --draft=false --notes "${RELEASE_CHANGES}" ./CHANGELOG.md
      - slack/status:
          webhook: "$SLACK_WEBHOOK_ANNOUNCEMENT"
          success_message: '*"${CIRCLE_PROJECT_REPONAME}"* - Release \`"v${RELEASE_TAG}"\` \nhttps://github.com/mojaloop/"${CIRCLE_PROJECT_REPONAME}"/releases/tag/"v${RELEASE_TAG}"'

  publish-docker:
    executor: default-machine
    environment: *defaults_environment
    steps:
      - checkout
      - run:
          name: Setup for LATEST release
          command: |
            echo "export RELEASE_TAG=$RELEASE_TAG_PROD" >> $BASH_ENV
            echo "RELEASE_TAG=$RELEASE_TAG_PROD"
            PACKAGE_VERSION=$(cat package-lock.json | jq -r .version)
            echo "export PACKAGE_VERSION=${PACKAGE_VERSION}" >> $BASH_ENV
            echo "PACKAGE_VERSION=${PACKAGE_VERSION}"
      # - attach_workspace:
      #     at: /tmp
      # - run:
      #     name: Load the pre-built docker image from workspace
      #     command: docker load -i /tmp/docker-image.tar

      - run:
          name: Build docker image
          command: |
            echo "Building Docker image: local"
            export IMAGE_NAME=$DOCKER_ORG/$CIRCLE_PROJECT_REPONAME
            echo 'export IMAGE_NAME=`$IMAGE_NAME`' >> $BASH_ENV
            export IMAGE_TAG=local

            yarn docker:build
      - run:
          name: Login to Docker Hub
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS

      - run:
          name: Re-tag pre built image
          command: |
            export SRC_IMAGE_NAME=$DOCKER_ORG/$CIRCLE_PROJECT_REPONAME
            export SRC_IMAGE_TAG=local
            export TRG_IMAGE_NAME=$SRC_IMAGE_NAME
            export TRG_IMAGE_TAG=$RELEASE_TAG
            echo "Re-tagging ${SRC_IMAGE_NAME}*:${SRC_IMAGE_TAG} image as ${TRG_IMAGE_NAME}*:${TRG_IMAGE_TAG}"
            yarn docker:tag

            export SRC_IMAGE_NAME=$DOCKER_ORG/$CIRCLE_PROJECT_REPONAME
            export SRC_IMAGE_TAG=$RELEASE_TAG
            export TRG_IMAGE_NAME=$SRC_IMAGE_NAME
            export TRG_IMAGE_TAG=$CIRCLE_TAG
            echo "Re-tagging ${SRC_IMAGE_NAME}*:${SRC_IMAGE_TAG} image as ${TRG_IMAGE_NAME}*:${TRG_IMAGE_TAG}"
            yarn docker:tag
      - run:
          name: Publish Docker image $CIRCLE_TAG & Latest tag to Docker Hub
          command: |
            export IMAGE_NAME=$DOCKER_ORG/$CIRCLE_PROJECT_REPONAME
            export IMAGE_TAG=$RELEASE_TAG
            echo "Publishing ${IMAGE_NAME}*:${IMAGE_TAG} image"
            yarn docker:publish

            export IMAGE_NAME=$DOCKER_ORG/$CIRCLE_PROJECT_REPONAME
            export IMAGE_TAG=$CIRCLE_TAG
            echo "Publishing ${IMAGE_NAME}*:${IMAGE_TAG} image"
            yarn docker:publish

      # - run:
      #     name: Re-tag pre built image
      #     command: |
      #       docker tag $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:local $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:latest
      #       docker tag $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:local $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG

      # - run:
      #     name: Publish Docker image $CIRCLE_TAG & Latest tag to Docker Hub
      #     command: |
      #       echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG"
      #       docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
      #       echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:latest"
      #       docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:latest

  publish-docker-snapshot:
    executor: default-machine
    environment: *defaults_environment
    steps:
      - checkout
      - run:
          name: Setup for SNAPSHOT release
          command: |
            echo "export RELEASE_TAG=$RELEASE_TAG_SNAPSHOT" >> $BASH_ENV
            echo "RELEASE_TAG=$RELEASE_TAG_SNAPSHOT"
            PACKAGE_VERSION=$(cat package-lock.json | jq -r .version)
            echo "export PACKAGE_VERSION=${PACKAGE_VERSION}" >> $BASH_ENV
            echo "PACKAGE_VERSION=${PACKAGE_VERSION}"

      # - attach_workspace:
      #     at: /tmp
      # - run:
      #     name: Load the pre-built docker image from workspace
      #     command: docker load -i /tmp/docker-image.tar

      - run:
          name: Build docker image
          command: |
            echo "Building Docker image: local"
            export IMAGE_NAME=$DOCKER_ORG/$CIRCLE_PROJECT_REPONAME
            echo 'export IMAGE_NAME=`$IMAGE_NAME`' >> $BASH_ENV
            export IMAGE_TAG=local

            yarn docker:build
      - run:
          name: Login to Docker Hub
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS

      - run:
          name: Re-tag pre built image
          command: |
            export SRC_IMAGE_NAME=$DOCKER_ORG/$CIRCLE_PROJECT_REPONAME
            export SRC_IMAGE_TAG=local
            export TRG_IMAGE_NAME=$SRC_IMAGE_NAME
            export TRG_IMAGE_TAG=latest
            echo "Re-tagging ${SRC_IMAGE_NAME}*:${SRC_IMAGE_TAG} image as ${TRG_IMAGE_NAME}*:${TRG_IMAGE_TAG}"
            yarn docker:tag

            export SRC_IMAGE_NAME=$DOCKER_ORG/$CIRCLE_PROJECT_REPONAME
            export SRC_IMAGE_TAG=local
            export TRG_IMAGE_NAME=$SRC_IMAGE_NAME
            export TRG_IMAGE_TAG=$CIRCLE_TAG
            echo "Re-tagging ${SRC_IMAGE_NAME}*:${SRC_IMAGE_TAG} image as ${TRG_IMAGE_NAME}*:${TRG_IMAGE_TAG}"
            yarn docker:tag
      - run:
          name: Publish Docker image $CIRCLE_TAG & Latest tag to Docker Hub
          command: |
            export IMAGE_NAME=$DOCKER_ORG/$CIRCLE_PROJECT_REPONAME
            export IMAGE_TAG=latest
            echo "Publishing ${IMAGE_NAME}*:${IMAGE_TAG} image"
            yarn docker:publish

            export IMAGE_NAME=$DOCKER_ORG/$CIRCLE_PROJECT_REPONAME
            export IMAGE_TAG=$CIRCLE_TAG
            echo "Publishing ${IMAGE_NAME}*:${IMAGE_TAG} image"
            yarn docker:publish

  publish-npm:
    executor: default-docker
    environment: *defaults_environment
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: setup environment vars for LATEST release
          command: |
            echo 'export RELEASE_TAG=$RELEASE_TAG_PROD' >> $BASH_ENV
      - run:
          <<: *defaults_npm_auth
      - run:
          <<: *defaults_npm_publish_release
##
# Workflows
#
# CircleCI Workflow config
##
workflows:
  version: 2
  build_and_test:
    jobs:
      - pr-tools/pr-title-check:
          context: org-global
      - setup:
          context: org-global
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/

      - test-unit:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/

      - validate-openapi:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/

      - lint:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/

      - test-integration:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/

      - vulnerability-check:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - audit-licenses:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/

      # - build-local:
      #     context: org-global
      #     requires:
      #       - test-integration
      #       - validate-openapi
      #       - test-unit
      #     filters:
      #       tags:
      #         only: /v[0-9]+(\.[0-9]+)*(\-snapshot)?/
      #       branches:
      #         ignore:
      #           - /feature*/
      #           - /bugfix*/

      # TODO: fix this
      # - image-scan:
      #     context: org-global
      #     requires:
      #       - build-local
      #     filters:
      #       tags:
      #         only: /v[0-9]+(\.[0-9]+)*(\-snapshot)?/
      #       branches:
      #         ignore:
      #           - /feature*/
      #           - /bugfix*/

      # TODO: fix this
      # - license-scan:
      #     context: org-global
      #     requires:
      #       - build-local
      #     filters:
      #       tags:
      #         only: /v[0-9]+(\.[0-9]+)*(\-snapshot)?/
      #       branches:
      #         ignore:
      #           - /feature*/
      #           - /bugfix*/

      # New commits to master release automatically
      - release:
          context: org-global
          requires:
            # - build-local
            - pr-tools/pr-title-check
            - validate-openapi
            - test-unit
            - vulnerability-check
            - audit-licenses
            - test-integration
            # TODO: fix this
            # - license-scan
            # TODO: fix this
            # - image-scan
          filters:
            branches:
              only:
                - master
                - /release\/v.*/

      - github-release:
          context: org-global
          requires:
            - release
          filters:
            branches:
              only:
                - master
                - /release\/v.*/

      - publish-docker:
          context: org-global
          requires:
            # - build-local
            - pr-tools/pr-title-check
            - validate-openapi
            - test-unit
            - vulnerability-check
            - audit-licenses
            - test-integration
            # TODO: fix this
            # - license-scan
            # TODO: fix this
            # - image-scan
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              ignore:
                - /.*/

      - publish-docker-snapshot:
          context: org-global
          requires:
            # - build-local
            - pr-tools/pr-title-check
            - validate-openapi
            - test-unit
            - vulnerability-check
            - audit-licenses
            - test-integration
            # TODO: fix this
            # - license-scan
            # TODO: fix this
            # - image-scan
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*\-snapshot+((\.[0-9]+)?)/
            branches:
              ignore:
                - /.*/

      - publish-npm:
          context: org-global
          requires:
            - pr-tools/pr-title-check
            - validate-openapi
            - test-unit
            - vulnerability-check
            - audit-licenses
            - test-integration
            # TODO: fix this
            # - license-scan
            # TODO: fix this
            # - image-scan
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              ignore:
                - /.*/

